# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nlu/croaches.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class croaches(genpy.Message):
  _md5sum = "ac9bc09e5adba2f5d3b5afafdfe74769"
  _type = "nlu/croaches"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32    event
float32    frequency
int32    number_killed
int32    number_created
int32    time_stamp
int32    life 
"""
  __slots__ = ['event','frequency','number_killed','number_created','time_stamp','life']
  _slot_types = ['int32','float32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       event,frequency,number_killed,number_created,time_stamp,life

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(croaches, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.event is None:
        self.event = 0
      if self.frequency is None:
        self.frequency = 0.
      if self.number_killed is None:
        self.number_killed = 0
      if self.number_created is None:
        self.number_created = 0
      if self.time_stamp is None:
        self.time_stamp = 0
      if self.life is None:
        self.life = 0
    else:
      self.event = 0
      self.frequency = 0.
      self.number_killed = 0
      self.number_created = 0
      self.time_stamp = 0
      self.life = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_if4i.pack(_x.event, _x.frequency, _x.number_killed, _x.number_created, _x.time_stamp, _x.life))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.event, _x.frequency, _x.number_killed, _x.number_created, _x.time_stamp, _x.life,) = _struct_if4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_if4i.pack(_x.event, _x.frequency, _x.number_killed, _x.number_created, _x.time_stamp, _x.life))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.event, _x.frequency, _x.number_killed, _x.number_created, _x.time_stamp, _x.life,) = _struct_if4i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_if4i = struct.Struct("<if4i")
