# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nlu/midi.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nlu.msg

class midi(genpy.Message):
  _md5sum = "89ac7e18db078d2e326de3ebee350de8"
  _type = "nlu/midi"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string    midi_msg
float32   arousal
float32   valence
string    vocal
midiNote  note
midiCC  control


================================================================================
MSG: nlu/midiNote
uint8   channel
uint8   note
uint8   velocity


================================================================================
MSG: nlu/midiCC
uint16[]  channel
uint16[]  control
int16[]   value

"""
  __slots__ = ['midi_msg','arousal','valence','vocal','note','control']
  _slot_types = ['string','float32','float32','string','nlu/midiNote','nlu/midiCC']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       midi_msg,arousal,valence,vocal,note,control

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(midi, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.midi_msg is None:
        self.midi_msg = ''
      if self.arousal is None:
        self.arousal = 0.
      if self.valence is None:
        self.valence = 0.
      if self.vocal is None:
        self.vocal = ''
      if self.note is None:
        self.note = nlu.msg.midiNote()
      if self.control is None:
        self.control = nlu.msg.midiCC()
    else:
      self.midi_msg = ''
      self.arousal = 0.
      self.valence = 0.
      self.vocal = ''
      self.note = nlu.msg.midiNote()
      self.control = nlu.msg.midiCC()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.midi_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2f.pack(_x.arousal, _x.valence))
      _x = self.vocal
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3B.pack(_x.note.channel, _x.note.note, _x.note.velocity))
      length = len(self.control.channel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.control.channel))
      length = len(self.control.control)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.control.control))
      length = len(self.control.value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.control.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.note is None:
        self.note = nlu.msg.midiNote()
      if self.control is None:
        self.control = nlu.msg.midiCC()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.midi_msg = str[start:end].decode('utf-8')
      else:
        self.midi_msg = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.arousal, _x.valence,) = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vocal = str[start:end].decode('utf-8')
      else:
        self.vocal = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.note.channel, _x.note.note, _x.note.velocity,) = _struct_3B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.control.channel = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.control.control = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.control.value = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.midi_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2f.pack(_x.arousal, _x.valence))
      _x = self.vocal
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3B.pack(_x.note.channel, _x.note.note, _x.note.velocity))
      length = len(self.control.channel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.control.channel.tostring())
      length = len(self.control.control)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.control.control.tostring())
      length = len(self.control.value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.control.value.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.note is None:
        self.note = nlu.msg.midiNote()
      if self.control is None:
        self.control = nlu.msg.midiCC()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.midi_msg = str[start:end].decode('utf-8')
      else:
        self.midi_msg = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.arousal, _x.valence,) = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vocal = str[start:end].decode('utf-8')
      else:
        self.vocal = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.note.channel, _x.note.note, _x.note.velocity,) = _struct_3B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.control.channel = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.control.control = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.control.value = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B = struct.Struct("<3B")
_struct_2f = struct.Struct("<2f")
