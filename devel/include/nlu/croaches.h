// Generated by gencpp from file nlu/croaches.msg
// DO NOT EDIT!


#ifndef NLU_MESSAGE_CROACHES_H
#define NLU_MESSAGE_CROACHES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nlu
{
template <class ContainerAllocator>
struct croaches_
{
  typedef croaches_<ContainerAllocator> Type;

  croaches_()
    : event(0)
    , frequency(0.0)
    , number_killed(0)
    , number_created(0)
    , time_stamp(0)
    , life(0)  {
    }
  croaches_(const ContainerAllocator& _alloc)
    : event(0)
    , frequency(0.0)
    , number_killed(0)
    , number_created(0)
    , time_stamp(0)
    , life(0)  {
    }



   typedef int32_t _event_type;
  _event_type event;

   typedef float _frequency_type;
  _frequency_type frequency;

   typedef int32_t _number_killed_type;
  _number_killed_type number_killed;

   typedef int32_t _number_created_type;
  _number_created_type number_created;

   typedef int32_t _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef int32_t _life_type;
  _life_type life;




  typedef boost::shared_ptr< ::nlu::croaches_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nlu::croaches_<ContainerAllocator> const> ConstPtr;

}; // struct croaches_

typedef ::nlu::croaches_<std::allocator<void> > croaches;

typedef boost::shared_ptr< ::nlu::croaches > croachesPtr;
typedef boost::shared_ptr< ::nlu::croaches const> croachesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nlu::croaches_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nlu::croaches_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nlu

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
<<<<<<< HEAD
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'nlu': ['/home/m/catkin_ws/src/nlu/msg']}
=======
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'nlu': ['/home/m/catkin_ws/src/nlu/msg']}
>>>>>>> b883065350307bba6f0f0bd12bed736de3baf565

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nlu::croaches_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nlu::croaches_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nlu::croaches_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nlu::croaches_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nlu::croaches_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nlu::croaches_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nlu::croaches_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac9bc09e5adba2f5d3b5afafdfe74769";
  }

  static const char* value(const ::nlu::croaches_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac9bc09e5adba2f5ULL;
  static const uint64_t static_value2 = 0xd3b5afafdfe74769ULL;
};

template<class ContainerAllocator>
struct DataType< ::nlu::croaches_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nlu/croaches";
  }

  static const char* value(const ::nlu::croaches_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nlu::croaches_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32    event\n\
float32    frequency\n\
int32    number_killed\n\
int32    number_created\n\
int32    time_stamp\n\
int32    life \n\
";
  }

  static const char* value(const ::nlu::croaches_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nlu::croaches_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.event);
      stream.next(m.frequency);
      stream.next(m.number_killed);
      stream.next(m.number_created);
      stream.next(m.time_stamp);
      stream.next(m.life);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct croaches_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nlu::croaches_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nlu::croaches_<ContainerAllocator>& v)
  {
    s << indent << "event: ";
    Printer<int32_t>::stream(s, indent + "  ", v.event);
    s << indent << "frequency: ";
    Printer<float>::stream(s, indent + "  ", v.frequency);
    s << indent << "number_killed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_killed);
    s << indent << "number_created: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_created);
    s << indent << "time_stamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "life: ";
    Printer<int32_t>::stream(s, indent + "  ", v.life);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NLU_MESSAGE_CROACHES_H
